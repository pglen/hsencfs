                            QUICK START

 To use HSENCFS, type at the command prompt:

      hsencfs  -f  ~/secrets

 Will create and mount the ~/secrets directory. Everything you put in the
directory will be encrypted, everything you read will be decrypted. The
option -f will force creation of new directories.

Will prompt for password.

Note the leading tilde (~) for making dirs relative to your home dir.

The backing data directory in the above example is '~/.secrets' (without the quotes)
Note the leading dot, for conveniently hiding the backing data from view.

To prevent HSENCFS from prompting, add a pass option:

      hsencfs -f -p yourpass ~/secrets ~/.secrets

 Make sure you are aware of the implications of the clear text password
on the command line.

To prevent HSENCFS from prompting, add a pass program:

      hsencfs -f -a `which hsaskpass.py` ~/secrets ~/.secrets

Where 'hsgetpass' is a program to use for password prompt. It is
supplied with the HSENCFS project. Notice the backticks, as the 'a' option
requires a fully resolved path.

To allow HSENCFS from prompting in a GUI, add a GUI pass program:

      hsencfs -f -a `which hsaskpass.py`  ~/secrets ~/.secrets

Where 'hsaskpass.py' is a program to use for password prompt. It is
supplied with the HSENCFS project. Notice the backticks, as the 'a' option
requires a fully resolved path.

To ask HSENCFS to prompt for pass on first file operation:

      hsencfs -f -o -a `which hsaskpass.py`  ~/secrets ~/.secrets

 You may copy cypher text data in / out from the backing data directory.
This allows for robust backup or transport / upload. Make shure you copy the
.datx files as well.


// EOF