                        Fuse Mount Options
                        
The set of options that cannot be used with HSENCFS are FUSE options that 
influence caching. (direct_io and *_cache) These defeat the way HSENCFS 
works. HSENCFS depends on data is fed on cache boundaries. 
You have been warned.

Most of the generic mount options described in 'man mount' are
supported (ro, rw, suid, nosuid, dev, nodev, exec, noexec, atime,
noatime, sync async, dirsync).  Filesystems are mounted with
'-onodev,nosuid' by default, which can only be overridden by a
privileged user.

The most used FUSE options in HSENCFS context are:
    
    ro              --      Read only
    allow_other     --      Allow other users to see mount

Fuse will not allow most of the share* options and the allow_other option
unless configured in /etc/fuse.conf (add a line: 'user_allow_other')

FUSE Option Descriptions:

These are FUSE specific mount options that can be specified for all 
file systems, not all of them permissible with HSENCFS: (see notes above)

This section is extracted from the Fuse README. 

default_permissions

  By default FUSE doesn't check file access permissions, the
  filesystem is free to implement it's access policy or leave it to
  the underlying file access mechanism (e.g. in case of network
  filesystems).  This option enables permission checking, restricting
  access based on file mode.  This option is usually useful
  together with the 'allow_other' mount option.

allow_other

  This option overrides the security measure restricting file access
  to the user mounting the filesystem.  So all users (including root)
  can access the files.  This option is by default only allowed to
  root, but this restriction can be removed with a configuration
  option described in the previous section. This option is only allowed
  if configured in /etc/fuse.conf (add a line: 'user_allow_other')

allow_root

  This option is similar to 'allow_other' but file access is limited
  to the user mounting the filesystem and root.  This option and
  'allow_other' are mutually exclusive.

kernel_cache

  This option disables flushing the cache of the file contents on
  every open().  This should only be enabled on filesystems, where the
  file data is never changed externally (not through the mounted FUSE
  filesystem).  Thus it is not suitable for network filesystems and
  other "intermediate" filesystems.

  NOTE: if this option is not specified (and neither 'direct_io') data
  is still cached after the open(), so a read() system call will not
  always initiate a read operation.

async_read

  Perform reads asynchronously. This is the default

sync_read

  Perform all reads (even read-ahead) synchronously.

hard_remove

  The default behavior is that if an open file is deleted, the file is
  renamed to a hidden file (.fuse_hiddenXXX), and only removed when
  the file is finally released.  This relieves the filesystem
  implementation of having to deal with this problem.  This option
  disables the hiding behavior, and files are removed immediately in
  an unlink operation (or in a rename operation which overwrites an
  existing file).

  It is recommended that you not use the hard_remove option. When
  hard_remove is set, the following libc functions fail on unlinked
  files (returning errno of ENOENT):
     - read()
     - write()
     - fsync()
     - close()
     - f*xattr()
     - ftruncate()
     - fstat()
     - fchmod()
     - fchown()

debug

  Turns on debug information printing by the library.

fsname=NAME

  Sets the filesystem source (first field in /etc/mtab).  The default
  is the program name.

subtype=TYPE

  Sets the filesystem type (third field in /etc/mtab).  The default is
  the program name.

  If the kernel suppports it, /etc/mtab and /proc/mounts will show the
  filesystem type as "fuse.TYPE"

  If the kernel doesn't support subtypes, the source filed will be
  "TYPE#NAME", or if fsname option is not specified, just "TYPE".

use_ino

  Honor the 'st_ino' field in getattr() and fill_dir().  This value is
  used to fill in the 'st_ino' field in the stat()/lstat()/fstat()
  functions and the 'd_ino' field in the readdir() function.  The
  filesystem does not have to guarantee uniqueness, however some
  applications rely on this value being unique for the whole
  filesystem.

readdir_ino

  If 'use_ino' option is not given, still try to fill in the 'd_ino'
  field in readdir().  If the name was previously looked up, and is
  still in the cache, the inode number found there will be used.
  Otherwise it will be set to '-1'.  If 'use_ino' option is given,
  this option is ignored.

nonempty

  Allows mounts over a non-empty file or directory.  By default these
  mounts are rejected (from version 2.3.1) to prevent accidental
  covering up of data, which could for example prevent automatic
  backup.

umask=M

  Override the permission bits in 'st_mode' set by the filesystem.
  The resulting permission bits are the ones missing from the given
  umask value.  The value is given in octal representation.

uid=N

  Override the 'st_uid' field set by the filesystem.

gid=N

  Override the 'st_gid' field set by the filesystem.

blkdev

  Mount a filesystem backed by a block device.  This is a privileged
  option.  The device must be specified with the 'fsname=NAME' option.

entry_timeout=T

  The timeout in seconds for which name lookups will be cached. The
  default is 1.0 second.  For all the timeout options, it is possible
  to give fractions of a second as well (e.g. "-oentry_timeout=2.8")

negative_timeout=T

  The timeout in seconds for which a negative lookup will be cached.
  This means, that if file did not exist (lookup retuned ENOENT), the
  lookup will only be redone after the timeout, and the file/directory
  will be assumed to not exist until then.  The default is 0.0 second,
  meaning that caching negative lookups are disabled.

attr_timeout=T

  The timeout in seconds for which file/directory attributes are
  cached.  The default is 1.0 second.

ac_attr_timeout=T

  The timeout in seconds for which file attributes are cached for the
  purpose of checking if "auto_cache" should flush the file data on
  open.   The default is the value of 'attr_timeout'

intr

  Allow requests to be interrupted.  Turning on this option may result
  in unexpected behavior, if the filesystem does not support request
  interruption.

intr_signal=NUM

  Specify which signal number to send to the filesystem when a request
  is interrupted.  The default is 10 (USR1).

modules=M1[:M2...]

  Add modules to the filesystem stack.  Modules are pushed in the
  order they are specified, with the original filesystem being on the
  bottom of the stack.


